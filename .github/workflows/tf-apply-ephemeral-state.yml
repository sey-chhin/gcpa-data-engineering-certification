name: TF Apply (ephemeral GCS state)

on:
  workflow_dispatch: {}

permissions:
  contents: read
  id-token: write
  packages: read

env:
  TF_IN_AUTOMATION: true
  TF_INPUT: false
  TF_CCLI_ARGS_apply: -auto-approve -lock-timeout=5m
  TF_CLI_ARGS_destroy: -auto-approve -lock-timeout=5m
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION:     ${{ secrets.GCP_REGION }}
  GCP_ZONE:       ${{ secrets.GCP_ZONE }}
  # NEW: allow narrowing firewall via secret
  ALLOWED_CIDR:   ${{ secrets.ALLOWED_CIDR }}
  GCP_STATE_BUCKET_LOCATION: ${{ secrets.GCP_STATE_BUCKET_LOCATION }}


jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account:           ${{ secrets.GCP_WIF_SA }}

      - uses: google-github-actions/setup-gcloud@v2
      - uses: hashicorp/setup-terraform@v3

      # create temp GCS bucket for state storage to allow CI destroy on after testing is completed
      - name: Create temp state bucket
        id: mkbucket
        working-directory: terraform
        shell: bash
        run: |
          set -euo pipefail
          BUCKET="tfstate-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}-$$"
          BUCKET="${BUCKET,,}"
          echo "STATE_BUCKET=$BUCKET" >> "$GITHUB_ENV"

          gcloud config set project "${GCP_PROJECT_ID}"
          gsutil mb -l "${GCP_STATE_BUCKET_LOCATION}" "gs://${BUCKET}"
          cat > lifecycle.json <<'JSON'
          {"rule":[{"action":{"type":"Delete"},"condition":{"age":2}}]}
          JSON
          gsutil lifecycle set lifecycle.json "gs://${BUCKET}"
          cat > backend.hcl <<HCL
          bucket = "${BUCKET}"
          prefix = "state"
          HCL

      - name: Terraform init
        working-directory: terraform
        run: terraform init -reconfigure -backend-config=backend.hcl

        # standardizing formatting and validation
      - name: Format & Validate
        working-directory: terraform
        run: |
          terraform fmt -recursive
          terraform validate

        # run terraform plan and save output to file prior to apply
      - name: Plan
        id: plan
        working-directory: terraform
        shell: bash
        run: |
          # default to open if secret is empty/unset
          CIDR="${ALLOWED_CIDR:-0.0.0.0/0}"
          terraform plan \
            -var="project_id=${GCP_PROJECT_ID}" \
            -var="region=${GCP_REGION}" \
            -var="zone=${GCP_ZONE}" \
            -var="allowed_cidr=${CIDR}" \
            -out=tfplan.bin
          terraform show -no-color tfplan.bin > tfplan.txt

      - name: Apply
        working-directory: terraform
        shell: bash
        run: |
          terraform apply -input=false tfplan.bin

        # store state as artifact to allow destroy in separate workflow
      - name: Snapshot state (artifact)
        if: always()
        working-directory: terraform
        shell: bash
        run: |
          mkdir -p tfstate
          gsutil cp "gs://${STATE_BUCKET}/state/default.tfstate" tfstate/terraform.tfstate || true
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tfstate-${{ github.run_id }}-${{ github.run_attempt }}
          path: terraform/tfstate/
        
        # fail safely and destroy if apply fails
      - name: Destroy on failure
        if: failure()
        working-directory: terraform
        shell: bash
        run: |
          CIDR="${ALLOWED_CIDR:-0.0.0.0/0}"
          terraform destroy \
            -var="project_id=${GCP_PROJECT_ID}" \
            -var="region=${GCP_REGION}" \
            -var="zone=${GCP_ZONE}" \
            -var="allowed_cidr=${CIDR}"

      - name: Delete temp bucket
        if: always()
        shell: bash
        run: |
          if [[ -n "${STATE_BUCKET:-}" ]]; then
            gsutil -m rm -r "gs://${STATE_BUCKET}" || true
          fi

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tfplan-${{ github.run_id }}-${{ github.run_attempt }}
          path: terraform/tfplan.txt
