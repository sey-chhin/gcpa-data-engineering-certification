name: TF Apply (local state, saved as artifact)

on:
  workflow_dispatch: {}

permissions:
  contents: read
  id-token: write        # required for google OIDC (no keys)
  # packages: read       # uncomment if pulling private GHCR images

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # From repo secrets (Settings → Secrets and variables → Actions)
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION:     ${{ secrets.GCP_REGION }}
  GCP_ZONE:       ${{ secrets.GCP_ZONE }}
  ALLOWED_CIDR:   ${{ secrets.ALLOWED_CIDR }}   # e.g., 203.0.113.45/32

  TF_IN_AUTOMATION: true
  TF_INPUT: false
  TF_CLI_ARGS_apply: -auto-approve -lock-timeout=5m
  TF_CLI_ARGS_destroy: -auto-approve -lock-timeout=5m

jobs:
  apply:
    runs-on: ubuntu-latest
    environment: gcpa-variables

    steps:
      - uses: actions/checkout@v4

      # OIDC auth → Application Default Credentials for Terraform Google provider
      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account:           ${{ secrets.GCP_WIF_SA }}

      - uses: hashicorp/setup-terraform@v3

      # Configure a per-run local backend; state stays in repo workspace and is uploaded as an artifact
      - name: Configure local backend (per-run)
        working-directory: terraform
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p tfstate
          cat > backend_local.tf <<'HCL'
          terraform {
            backend "local" {
              path = "tfstate/terraform.tfstate"
              lock = true
            }
          }
          HCL

      - name: Terraform init
        working-directory: terraform
        run: terraform init -reconfigure

      - name: Format & Validate
        working-directory: terraform
        run: |
          terraform fmt -recursive
          terraform validate

      - name: Plan
        id: plan
        working-directory: terraform
        shell: bash
        run: |
          CIDR="${ALLOWED_CIDR:-0.0.0.0/0}"
          terraform plan \
            -var="project_id=${GCP_PROJECT_ID}" \
            -var="region=${GCP_REGION}" \
            -var="zone=${GCP_ZONE}" \
            -var="allowed_cidr=${CIDR}" \
            -out=tfplan.bin
          terraform show -no-color tfplan.bin > tfplan.txt

      - name: Apply
        working-directory: terraform
        run: terraform apply -input=false tfplan.bin

      # Save local state and a human-readable plan for later destroy/auditing
      - name: Upload state artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfstate-${{ github.run_id }}-${{ github.run_attempt }}
          path: terraform/tfstate/

      - name: Upload plan text
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ github.run_id }}-${{ github.run_attempt }}
          path: terraform/tfplan.txt

      # Optional: clean up the generated backend file
      - name: Cleanup backend file
        if: always()
        working-directory: terraform
        run: rm -f backend_local.tf || true
