name: TF Destroy (from saved state)

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: "GCP project ID"
        required: true
      region:
        description: "Region (e.g., us-east4)"
        required: true
        default: us-east4
      zone:
        description: Zone (e.g., us-east4-c)
        required: true
        default: us-east4-c
      run_id:
        description: "GitHub Actions run ID that produced the state artifact"
        required: true
      artifact_name:
        description: "Extract artifact name (default: tfstate-<run_id>-<attempt>); override if needed"
        required: false
        default: ""

permissions:
  contents: read
  id-token: write   # for GCP Workload Identity Federation
  actions: read     # needed to fetch artifacts from the given run

env:
  TF_IN_AUTOMATION: true
  TF_INPUT: false
  TF_CLI_ARGS_destroy: -auto-approve -lock-timeout=5m

jobs:
  destroy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # ---- Auth to Google Cloud (no gcloud init needed) ----
      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account:           ${{ secrets.GCP_WIF_SA }}

      - uses: google-github-actions/setup-gcloud@v2
      - uses: hashicorp/setup-terraform@v3

      # ---- Fetch the tfstate artifact from the prior run ----
      - name: Resolve & download state artifact
        id: get_art
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID="${{ inputs.run_id }}"
          # Find artifacts for that run
          JSON=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/actions/runs/${RUN_ID}/artifacts)

          # Derive default artifact name if not provided: tfstate-<run_id>-<attempt>
          if [[ -z "${{ inputs.artifact_name }}" ]]; then
            # Pull attempt from the run data
            ATTEMPT=$(gh api \
              -H "Accept: application/vnd.github+json" \
              /repos/${{ github.repository }}/actions/runs/${RUN_ID} --jq '.run_attempt')
            ART_NAME="tfstate-${RUN_ID}-${ATTEMPT}"
          else
            ART_NAME="${{ inputs.artifact_name }}"
          fi

          echo "Looking for artifact: ${ART_NAME}"
          ART_ID=$(echo "$JSON" | jq -r --arg NAME "$ART_NAME" '.artifacts[] | select(.name==$NAME) | .id')

          if [[ -z "$ART_ID" || "$ART_ID" == "null" ]]; then
            echo "Artifact '${ART_NAME}' not found for run ${RUN_ID}"
            echo "Available artifacts:"
            echo "$JSON" | jq -r '.artifacts[].name'
            exit 1
          fi

          mkdir -p terraform/tfstate
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/artifacts/${ART_ID}/zip > /tmp/state.zip

          unzip -o /tmp/state.zip -d terraform/tfstate
          ls -al terraform/tfstate

        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ---- Use LOCAL backend with the downloaded state ----
      - name: Init (local backend) & destroy
        working-directory: terraform
        shell: bash
        run: |
          set -euo pipefail
          # Ensure a local backend (no remote bucket)
          cat > backend_local.tf <<'HCL'
          terraform {
            backend "local" {
              path = "tfstate/terraform.tfstate"
              lock = true
            }
          }
          HCL

          # Initialize with local backend (uses downloaded tfstate)
          terraform init -reconfigure

          # Sanity: show resources Terraform thinks exist
          terraform state list || true

          # Destroy everything tracked by this state
          terraform destroy \
            -var="project_id=${{ inputs.project_id }}" \
            -var="region=${{ inputs.region }}" \
            -var="zone=${{ inputs.zone }}"

      # Optional: clean up the temporary backend file
      - name: Cleanup
        if: always()
        working-directory: terraform
        run: rm -f backend_local.tf || true
